<?php
// $Id$


/**
 * Implementation of hook_node_info().
*/
function calendar_entry_node_info(){
  return array(
    'calendar_entry' => array(
      'name'   => t('Calendar Entry'),
      'module' => 'calendar_entry',
      'description' => "create a calendar entry",
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'has_teaser'  => FALSE,
      'has_body'    => TRUE,
      'body_label'  => t('Body')
    )
  );
}


/**
 *  Implementation of hook_menu().
*/
function calendar_entry_menu(){
  $items['node/%node/og/calendar-entry/add'] = array(
    'title'  => 'Create Calendar Entry',
    'page callback' => 'node_add',
    'page arguments' => array(3, 1),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'calendar_entry', NULL, 1),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );
  $items['node/add/calendar-entry'] = array(
    'title'  => 'Calendar Entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_entry_pre_form'),
    'access callback' => true,
  );
  return $items;
}


/**
 * Implementation of hook_access().
 */
function calendar_entry_access($op, $node) {
  global $user;
  return false;
}

/**
 * Implementation of hook_form().
 */
function calendar_entry_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -1
  );
 
  
  $form['body_field']['body'] = array(
    '#type'   => 'textarea',
    '#title'  => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows'          => 4,
    '#required'      => FALSE,
    
  );
  $form['body_field']['format'] = filter_form($node->format);
  $form['body_field']['#prefix'] = '<div class="body-field-wrapper">';
  $form['body_field']['#suffix'] = '</div>';
  

  return $form;
}


function calendar_entry_pre_form(){
  $options = array(NULL => ' Select Group');
  $query = 'SELECT nid FROM {og}';
  $result = db_query($query);
  $count = 0;
  while($data = db_fetch_object($result)){
    $group = node_load($data->nid);
    if(og_group_access_get_access('create calendar entry', $group) ){
      $options[$group->nid] =  $group->title;
      $count++;
    }
  }
  asort($options);

  if ($count == 0) {
    drupal_set_message('You do not have permission to create a calendar entry');
  }
  else if ($count == 1) {
    $group_nids = array_keys($options);
    drupal_goto('node/'.array_pop($group_nids).'/og/calendar-entry/add');
  }
  else {
    $form['author_group_nid'] = array(
      '#type' => 'select',
      '#title' => t('Authoring Group'),
      '#options' => $options,
      '#required' => TRUE,
    );
    $form['submit'] = array(
      '#type' => 'submit', 
      '#value' => t('Submit'),
      '#submit' => array('calendar_entry_quick_form_submit'),
      '#weight' => 5,
    );
    return $form;
  }
}


function calendar_entry_quick_form_submit($form, $form_state){
  drupal_goto('node/'.$form_state['values']['author_group_nid'].'/og/calendar-entry/add');
}



/**
 * Implementations of hook_group_access_perm();
*/
function calendar_entry_group_access_perm(){
  return array('view calendar entry', 'create calendar entry', 'edit own calendar entry');
}


/**
 * Implementations of hook_group_access();
*/
function calendar_entry_group_access($op, $node, $group) {
  switch($op){
  case 'create':
    return og_group_access_get_access('create calendar entry', $group);
    break;
  case 'view':
    return og_group_access_get_access('view calendar entry', $group);
    break;
  case 'update':
  case 'delete':
    if(isset($node->author_group_nid)){
      return og_group_access_get_access('edit own calendar entry', node_load($node->author_group_nid));
    }
    else{
      return FALSE;
    }
    break;
  }
  return FALSE;
}



/**
 * Implementations of hook_group_access_view_access_level();
*/
function calendar_entry_group_access_view_access_level($group) {
    return $group->perms['view calendar entry'];
}


/**
 * Implementations of hook_group_access_create_links()

function calendar_entry_group_access_create_links($group){
  $links = array();
  if(node_access('create', 'calendar-entry', NULL, $group)){
    $links[] = l('Create Calendar Entry', 'node/'. $group->nid . '/og/calendar-entry/add');
  }
  return $links;
}
*/
