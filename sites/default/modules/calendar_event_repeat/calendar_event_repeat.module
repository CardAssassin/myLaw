<?php



/**
 * Implementation of hook_form_alter().
 */
function calendar_event_repeat_form_alter(&$form, $form_state, $form_id) {
  if ('node_type_form' == $form_id) {
    calendar_event_repeat_form_content_type($form, $form_state, $form_id);
  }
  else if (isset($form['type']['#value']) && $form['type']['#value'] .'_node_form' == $form_id) {
    calendar_event_repeat_form_item($form, $form_state, $form_id);
  }
}

function calendar_event_repeat_form_content_type(&$form, $form_state, $form_id){
  $form['workflow']['calendar_event_repeat'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable creation of repeated calendar events'),
    '#default_value' => variable_get('calendar_event_repeat_'. $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the ability to repeat event dates for this node type.')
  );
  
}


function calendar_event_repeat_form_item(&$form, $form_state, $form_id){
  // if scheduling has been enabled for this node type
  if (variable_get('calendar_event_repeat_'. $form['type']['#value'], 0) == 1) {
    $node = $form['#node'];

    $date_format = 'Y-m-d H:i';
    $end_of_today = mktime(23, 59, 0, date('n',time()), date('j', time()), date('Y', time()));

    $form['calendar_event']['repeat_date'] = array(
      '#type' => 'fieldset',
      '#title' => t('Repeat Dates'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,//(empty($node->repeat_dates) && variable_get('scheduler_optional_'. $form['type']['#value'], 0)),
      '#weight' => 1,
    );

    $form['calendar_event']['repeat_date']['repeat_num_weeks'] = array(
      '#title' => t('Repeat every # of weeks'),
      '#type' => 'textfield',
      '#default_value' => 1,
      '#weight' => 0,
    );

    $form['calendar_event']['repeat_date']['repeat_on_days'] = array(
      '#title' => t('Days'),
      '#type' => 'checkboxes',
      '#default_value' => array(),
      '#options' => array(
        1 => t('Monday'),
        2 => t('Tuesday'),
        3 => t('Wednesday'),
        4 => t('Thursday'),
        5 => t('Friday'),
        6 => t('Saturday'),
        7 => t('Sunday'),
      ),
      '#weight' => 1,
    );

    $form['calendar_event']['repeat_date']['repeat_until'] = array(
      '#title' => t('Repeat Until'),
      '#type'  => 'date_popup',
      '#format' => $date_format,
      '#default_value' => date($date_format, $end_of_today),
      '#date_year_range' => '0:+1',
      '#date_increment' => 1,
      '#weight' => 2,
    );
  }
}



/**
 * Implementation of hook_nodeapi().
*/
function calendar_event_repeat_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
  case 'load':
    $query = "SELECT nid FROM {calendar_event_repeat} WHERE next_nid = %d";
    $data = db_fetch_object(db_query($query, $node->nid));
    $node->calendar_event_repeat['repeat_previous'] = $data->nid;

    $query = "SELECT next_nid FROM {calendar_event_repeat} WHERE nid = %d";
    $data = db_fetch_object(db_query($query, $node->nid));
    $node->calendar_event_repeat['repeat_next'] = $data->next_nid;

  case 'view':
    if (!empty($node->calendar_event_repeat)) {
      $node->content['calendar_event_repeat'] = array(
        '#value' => theme('calendar_event_repeat', $node->calendar_event_repeat['repeat_previous'], $node->calendar_event_repeat['repeat_next']),
        '#weight' => 91,
      );
    }

    break;
  case 'validate':
  case 'presave':
    if(isset($node->calendar_event['repeat_date']['repeat_until']) && ! is_numeric($node->calendar_event['repeat_date']['repeat_until'])){
      $node->calendar_event['repeat_date']['repeat_until'] = date_convert($node->calendar_event['repeat_date']['repeat_until'], DATE_DATETIME, DATE_UNIX);
    }
    break;
  case 'update':
  case 'insert':
    if($node->calendar_event['has_event'] && isset($node->calendar_event['repeat_date']['repeat_on_days'])){
      $days_selected = FALSE;
      foreach($node->calendar_event['repeat_date']['repeat_on_days'] as $day){
        if($day){
          $days_selected = TRUE;
        }
      }
      if (! $days_selected) {
        break;
      }
      module_load_include('inc', 'node', 'node.pages');
      $create_node = array('type' => $node->type); 
      $create_object = (object)$create_node;

      $calendar_event_start = $node->calendar_event['start'];
      $calendar_event_end = $node->calendar_event['end'];
      $unpublish_on = $node->unpublish_on;
      $publish_on = $node->publish_on;

      //$current = date_convert($calendar_event_start, DATE_DATETIME, DATE_UNIX);
      //$finish = date_convert($node->calendar_event['repeat_date']['repeat_until'], DATE_DATETIME, DATE_UNIX);

      $current = $calendar_event_start;
      $finish = $node->calendar_event['repeat_date']['repeat_until'];
   
      $prev_nid = $node->nid;
      $num_calendar_events = 1;

      $begining_of_week = date('w', $current);
      if($begining_of_week == 0) {
        $begining_of_week = 7;
      }
      $week = 1;
      while($current < $finish){
        $num_calendar_events++;
        $dow = date('w', $current);
        $increment = 0;
        do {
          $increment++;
          $dow++;
          if ($dow == 8) {
            $dow = 1;
          }
          if ($dow == $begining_of_week) {
            $week++;
          }
        }
        while ((! $node->calendar_event['repeat_date']['repeat_on_days'][$dow]) || ($week % $node->calendar_event['repeat_date']['repeat_num_weeks']));

        $current = _calendar_event_repeat_increment_date($current, $increment);
        //$current = mktime(date('H',$current), date('i',$current), 0, date('n',$current), date('j', $current)+$increment, date('Y', $current));
        if($current < $finish){
          $calendar_event_start = _calendar_event_repeat_increment_date($calendar_event_start, $increment);
          $calendar_event_end = _calendar_event_repeat_increment_date($calendar_event_end, $increment);
          $publish_on = $unpublish_on;
          $unpublish_on = $calendar_event_end;
          $title = $node->title . ' #' . $num_calendar_events;

          $calendar_entry_date_format = 'Y-m-d H:i';
          $scheduler_date_format = variable_get('scheduler_date_format', SCHEDULER_DATE_FORMAT); 

          $form_state = array();
          $form_state['values'] = array(
            'uid'         => $node->uid,
            'name'        => $node->name,
            'title'       => $title,
            'teaser'      => $node->teaser,
            'body'        => $node->body,
            'og_groups'   => $node->og_groups,
            'author_group_nid' => $node->author_group_nid,
            'calendar_event' => array(
              'has_event'      => $node->calendar_event['has_event'],
              'start'          => date($calendar_entry_date_format, $calendar_event_start),
              'end'            => date($calendar_entry_date_format, $calendar_event_end),
            ),
            'create_schedule' => $node->create_schedule,
            'publish_on'  => date($scheduler_date_format, $publish_on),
            'unpublish_on' => date($scheduler_date_format, $unpublish_on),

            'op'          => t('Save'),
          );
          drupal_execute($node->type.'_node_form', $form_state, $create_object);
          //retrieve nid for node that was just created
          $query = "SELECT n.nid FROM {node} n INNER JOIN {calendar_event} ce ON n.nid = ce.nid WHERE n.title = '%s' AND ce.start = %d AND ce.end = %d";
          $data = db_fetch_object(db_query($query, $title, $calendar_event_start, $calendar_event_end));
      
          $query = "INSERT INTO {calendar_event_repeat} (nid, next_nid) VALUES (%d, %d)";
          db_query($query, $prev_nid, $data->nid);
          $prev_nid = $data->nid;
        }
      }
    }
    break;
   
  case 'delete':
    $query = 'SELECT nid FROM {calendar_event_repeat} WHERE next_nid = %d';
    $data = db_fetch_object(db_query($query, $node->nid));
    $nid = $data->nid;

    $query = 'SELECT next_nid FROM {calendar_event_repeat} WHERE nid = %d';
    $data = db_fetch_object(db_query($query, $node->nid));
    $next_nid = $data->next_nid;

    $query = 'DELETE FROM {calendar_event_repeat} WHERE nid = %d OR next_nid = %d';
    db_query($query, $node->nid, $node->nid);

    if($nid != NULL && $next_nid != NULL){
      $query = 'INSERT INTO {calendar_event_repeat} (nid, next_nid) VALUES (%d, %d)';
      db_query($query, $nid, $next_nid);
    }
  
    break;
  }
}


function calendar_event_repeat_theme(){
  return array(
    'calendar_event_repeat' => array(
      'arguments' => array('previous_nid' => NULL, 'next_nid' => NULL),
      'template' => 'calendar-event-repeat',
    ),
  );
}




function _calendar_event_repeat_mktimestamp($date){
  return mktime(date('H',$date), date('i',$date), 0, date('n',$date), date('j', $date), date('Y', $date));
}


/*
function _calendar_event_repeat_increment_date($date, $increment, $format){
  $date = date_convert($date , DATE_DATETIME, DATE_UNIX) - _calendar_event_timezone();
  return date($format, mktime(date('H',$date), date('i',$date), 0, date('n',$date), date('j', $date)+$increment, date('Y', $date)));
}
*/

function _calendar_event_repeat_increment_date($date, $increment){
  return $date + ($increment * 24 * 60 * 60);
}

