<?php
// $Id

/**
 * Implementation of hook_node_info().
*/
function og_book_node_info(){
  return array(
    'group_book' => array(
      'name'   => t('Group Book'),
      'module' => 'og_book',
      'description' => "Create book pages within a group",
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'has_teaser'  => FALSE,
      'has_body'    => TRUE,
      'body_label'  => t('Body')
    )
  );
}



/**
 * Implementation of hook_form().
 */
function og_book_form(&$node) {
  $type = node_get_types('type', $node);
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -1
  );
 

  $form['body_field']['body'] = array(
    '#type'   => 'textarea',
    '#title'  => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows'          => 4,
    '#required'      => FALSE,
    
  );
  $form['body_field']['format'] = filter_form($node->format);
  $form['body_field']['#prefix'] = '<div class="body-field-wrapper">';
  $form['body_field']['#suffix'] = '</div>';

  return $form;
}


/**
 * Implementation of hook_group_access_perm().
 */
function og_book_group_access_perm() {
  return array('view books', 'add content to books', 'administer book outlines');
}


/**
 * Implementations of hook_group_access();
*/
function og_book_group_access($op, $node, $group) {
  switch($op){
  case 'view':
    return og_group_access_get_access('view books', $group);
  case 'create':
  case 'update':
  case 'delete':
    return og_group_access_get_access('add content to books', $group);
  }
}



/**
 * Implementations of hook_group_access_view_access_level();
*/
function og_book_group_access_view_access_level($group) {
    return $group->perms['view books'];
}



/**
 * Implementation of hook_menu().
 */
function og_book_menu(){
  $items['node/%node/og/group-book/add'] = array(
    'title'  => 'Create Book Page',
    'page callback' => 'node_add',
    'page arguments' => array('group_book', 1),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'group_book', NULL, 1),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );
  $items['admin/content/group-book'] = array(
    'title' => 'Group Book Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_book_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


function og_book_menu_alter(&$items) {
  $items['node/%node/outline']['access callback'] = '_og_book_outline_access';
  $items['node/%node/outline/remove']['access callback'] = '_og_book_outline_remove_access';
}


/**
 * Menu item access callback - determine if the outline tab is accessible.
 */
function _og_book_outline_access($node) {
  if(isset($node->author_group_nid)){
    $author_group = node_load($node->author_group_nid);
    return og_group_access_get_access('administer book outlines', $author_group);
  }
  return FALSE;
}


/**
 * Menu item access callback - determine if the user can remove nodes from the outline.
 */
function _og_book_outline_remove_access($node) {
  return isset($node->book) && ($node->book['bid'] != $node->nid) &&  _og_book_outline_access($node);
}


function og_book_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if(og_is_group_type($node->type)){
    if (!$teaser) {
      $child_type = variable_get('og_book_child_type', 'group-book');
      if(og_group_access_get_access('add content to books', $node) && node_access('create', $child_type, NULL, $node)){
         $links['book_add_top'] = array(
          'title' => t('Add top-level page'),
          'href' => "node/".$node->nid."/og/". str_replace('_', '-', $child_type)."/add",
        'query' => "book=new",
        );
      }
    }
  }
  return $links;
}


function og_book_link_alter(&$links, &$node){
  
  if(isset($node->book) && isset($node->author_group_nid)){
    $group = node_load($node->author_group_nid);
    $child_type = variable_get('og_book_child_type', 'group-book');
    if ((og_group_access_get_access('add content to books', $group) || og_group_access_get_access('administer book outlines', $group)) && node_access('create', $child_type, NULL, $group) && $node->status == 1 && $node->book['depth'] < MENU_MAX_DEPTH) {
      $links['book_add_child'] = array(
        'title' => t('Add child page'),
        'href' => "node/".$group->nid."/og/". str_replace('_', '-', $child_type)."/add",
        'query' => "parent=". $node->book['mlid'],
      );
    }
    else{
      unset($links['book_add_child']);
    }
    if (user_access('access printer-friendly version')) {
      $links['book_printer'] = array(
        'title' => t('Printer-friendly version'),
        'href' => 'book/export/html/'. $node->nid,
        'attributes' => array('title' => t('Show a printer-friendly version of this book page and its sub-pages.'))
      );
    }
  }
  
}


/**
 * Determine if a given node type is in the list of types allowed for books.
 */
function og_book_type_is_allowed($type) {
  return in_array($type, variable_get('og_book_allowed_types', array('group_book')));
}


/**
 * Implementation of hook_node_type().
 *
 * Update book module's persistent variables if the machine-readable name of a
 * node type is changed.
 */
function og_book_node_type($op, $type) {

  switch ($op) {
    case 'update':
      if (!empty($type->old_type) && $type->old_type != $type->type) {
        // Update the list of node types that are allowed to be added to books.
        $allowed_types = variable_get('og_book_allowed_types', array('group_book'));
        $key = array_search($type->old_type, $allowed_types);
        if ($key !== FALSE) {
          $allowed_types[$type->type] = $allowed_types[$key] ? $type->type : 0;
          unset($allowed_types[$key]);
          variable_set('og_book_allowed_types', $allowed_types);
        }
        // Update the setting for the "Add child page" link.
        if (variable_get('og_book_child_type', 'group_book') == $type->old_type) {
          variable_set('og_book_child_type', $type->type);
        }
      }
      break;
  }
}


/**
 * Implementation of hook_link().
 
function book_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();


  if ($type == 'node' && isset($node->book)) {
    if (!$teaser) {
      $child_type = variable_get('book_child_type', 'book');
      if ((user_access('add content to books') || user_access('administer book outlines')) && node_access('create', $child_type) && $node->status == 1 && $node->book['depth'] < MENU_MAX_DEPTH) {
        $links['book_add_child'] = array(
          'title' => t('Add child page'),
          'href' => "node/add/". str_replace('_', '-', $child_type),
          'query' => "parent=". $node->book['mlid'],
        );
      }
      if (user_access('access printer-friendly version')) {
        $links['book_printer'] = array(
          'title' => t('Printer-friendly version'),
          'href' => 'book/export/html/'. $node->nid,
          'attributes' => array('title' => t('Show a printer-friendly version of this book page and its sub-pages.'))
        );
      }
    }
  }
*/
/*
  if ($type == 'node' && isset($node->book) && isset($node->author_group_nid)) {
    $group = node_load($node->author_group_nid);
    $child_type = variable_get('book_child_type', 'book');
    if ((og_group_access_get_access('add content to books', $group) || og_group_access_get_access('administer book outlines', $group)) && node_access('create', $child_type, NULL, $group) && $node->status == 1 && $node->book['depth'] < MENU_MAX_DEPTH) {
      $links['book_add_child'] = array(
        'title' => t('Add child page'),
        'href' => "node/".$group->nid."og/". str_replace('_', '-', $child_type)."/add",
        'query' => "parent=". $node->book['mlid'],
      );
    }
    if (user_access('access printer-friendly version')) {
      $links['book_printer'] = array(
        'title' => t('Printer-friendly version'),
        'href' => 'book/export/html/'. $node->nid,
        'attributes' => array('title' => t('Show a printer-friendly version of this book page and its sub-pages.'))
      );
    }

  }
  return $links;

}
*/

/**
 * Implementation of hook_block().
 *
 * Displays the book table of contents in a block when the current page is a
 * single-node view of a book node.
 */
function og_book_block($op = 'list', $delta = 0, $edit = array()) {
  $block = array();
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Group Book TOC');
      $block[0]['cache'] = BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_PER_ROLE;
      return $block;
    case 'view':
      $current_bid = 0;
      if ($node = menu_get_object()) {
        $current_bid = empty($node->book['bid']) ? 0 : $node->book['bid'];
      }
      if (variable_get('book_block_mode', 'all pages') == 'all pages') {
        $block['subject'] = t('Table of Contents');
        $output = '';
        $pseudo_tree = array(0 => array('below' => FALSE));
        $group = og_get_group_context();
        foreach (og_book_get_books($group->nid) as $book_id => $book) {
          if ($book['bid'] == $current_bid) {
            // If the current page is a node associated with a book, the menu
            // needs to be retrieved.
            $book_menus[$book_id] = menu_tree_output(menu_tree_all_data($node->book['menu_name'], $node->book));
          }
          else {
            // Since we know we will only display a link to the top node, there
            // is no reason to run an additional menu tree query for each book.
            $book['in_active_trail'] = FALSE;
            $pseudo_tree[0]['link'] = $book;
            $book_menus[$book_id] = menu_tree_output($pseudo_tree);
          }
        }
        $block['content'] = theme('book_all_books_block', $book_menus);
      }
      elseif ($current_bid) {
        // Only display this block when the user is browsing a book.
        $title = db_result(db_query(db_rewrite_sql('SELECT n.title FROM {node} n WHERE n.nid = %d'), $node->book['bid']));
        // Only show the block if the user has view access for the top-level node.
        if ($title) {
          $tree = menu_tree_all_data($node->book['menu_name'], $node->book);
          // There should only be one element at the top level.
          $data = array_shift($tree);
          $block['subject'] = theme('book_title_link', $data['link']);
          $block['content'] = ($data['below']) ? menu_tree_output($data['below']) : '';
        }
      }
      return $block;
    case 'configure':
      $options = array(
        'all pages' => t('Show block on all pages'),
        'book pages' => t('Show block only on book pages'),
      );
      $form['book_block_mode'] = array(
        '#type' => 'radios',
        '#title' => t('Book navigation block display'),
        '#options' => $options,
        '#default_value' => variable_get('book_block_mode', 'all pages'),
        '#description' => t("If <em>Show block on all group pages</em> is selected, the block will contain the automatically generated menus for all of the site's books. If <em>Show block only on book pages</em> is selected, the block will contain only the one menu corresponding to the current page's book. In this case, if the current page is not in a book, no block will be displayed. The <em>Page specific visibility settings</em> or other visibility settings can be used in addition to selectively display this block."),
        );
      return $form;
    case 'save':
      variable_set('book_block_mode', $edit['book_block_mode']);
      break;
  }
}




/**
 * Returns an array of all books.
 *
 * This list may be used for generating a list of all the books, or for building
 * the options for a form select.
*/
function og_book_get_books($group_nid) {
  static $all_books;

  if (!isset($all_books)) {
    $all_books = array();
    $result = db_query("SELECT DISTINCT(bid) FROM {book} b INNER JOIN {og_author} a ON b.bid = a.nid WHERE a.author_group_nid = %d", $group_nid);
    $nids = array();
    while ($book = db_fetch_array($result)) {
      $nids[] = $book['bid'];
    }
    if ($nids) {
      $result2 = db_query(db_rewrite_sql("SELECT n.type, n.title, b.*, ml.* FROM {book} b INNER JOIN {node} n on b.nid = n.nid INNER JOIN {menu_links} ml ON b.mlid = ml.mlid WHERE n.nid IN (". implode(',', $nids) .") AND n.status = 1 ORDER BY ml.weight, ml.link_title"));
      while ($link = db_fetch_array($result2)) {
        $link['href'] = $link['link_path'];
        $link['options'] = unserialize($link['options']);
        $all_books[$link['bid']] = $link;
      }
    }
  }
  return $all_books;
}




/**
 * Implementation of hook_form_alter(). Adds the book fieldset to the node form.
 *
 * @see book_pick_book_submit()
 * @see book_submit()
 */
function og_book_form_alter(&$form, $form_state, $form_id) {
  
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    // Add elements to the node form
    $node = $form['#node'];

    if(isset($node->author_group_nid)){
      $group = node_load($node->author_group_nid);
    }
    else{
      $group = og_get_group_context();
    }

    
 
    if ((og_group_access_get_access('administer book outlines', $group) ||og_group_access_get_access('add content to books', $group)) && ((!empty($node->book['mlid']) && !empty($node->nid)) || og_book_type_is_allowed($node->type))) {
      // Already in the book hierarchy or this node type is allowed
      $access = TRUE;
    }
 
    
    if ($access) {
      _og_book_add_form_elements($form, $node);
      $form['book']['pick-book'] = array(
        '#type' => 'submit',
        '#value' => t('Change book (update list of parents)'),
         // Submit the node form so the parent select options get updated.
       // This is typically only used when JS is disabled.  Since the parent options
         // won't be changed via AJAX, a button is provided in the node form to submit
         // the form and generate options in the parent select corresponding to the
         // selected book.  This is similar to what happens during a node preview.
        '#submit' => array('node_form_submit_build_node'),
        '#weight' => 20,
      );
    }
  }
}


/**
 * Build the common elements of the book form for the node and outline forms.
 */
function _og_book_add_form_elements(&$form, $node) {
  // Need this for AJAX.
  $form['#cache'] = TRUE;
  drupal_add_js("if (Drupal.jsEnabled) { $(document).ready(function() { $('#edit-book-pick-book').css('display', 'none'); }); }", 'inline');

  $form['book'] = array(
    '#type' => 'fieldset',
    '#title' => t('Book outline'),
    '#weight' => 10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#attributes' => array('class' => 'book-outline-form'),
  );
  foreach (array('menu_name', 'mlid', 'nid', 'router_path', 'has_children', 'options', 'module', 'original_bid', 'parent_depth_limit') as $key) {
    $form['book'][$key] = array(
      '#type' => 'value',
      '#value' => $node->book[$key],
    );
  }

  $form['book']['plid'] = _book_parent_select($node->book);

  $form['book']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $node->book['weight'],
    '#delta' => 15,
    '#weight' => 5,
    '#description' => t('Pages at a given level are ordered first by weight and then by title.'),
  );
  $options = array();
  $nid = isset($node->nid) ? $node->nid : 'new';

  if(isset($node->author_group_nid)){
    $group = node_load($node->author_group_nid);
  }
  else{
    $group = og_get_group_context();
  }

  if (isset($node->nid) && ($nid == $node->book['original_bid']) && ($node->book['parent_depth_limit'] == 0)) {
    // This is the top level node in a maximum depth book and thus cannot be moved.
    $options[$node->nid] = $node->title;
  }
  else {
    
    foreach (og_book_get_books($group->nid) as $book) {
      $options[$book['nid']] = $book['title'];
    }
  }

  if (og_group_access_get_access('add content to books', $group) && ($nid == 'new' || ($nid != $node->book['original_bid']))) {
    // The node can become a new book, if it is not one already.
    $options = array($nid => '<'. t('create a new book') .'>') + $options;
  }

  if (!$node->book['mlid']) {
    // The node is not currently in a the hierarchy.
    $options = array(0 => '<'. t('none') .'>') + $options;
  }

  $new_book = ($node->type == variable_get('og_book_child_type', 'group_book') && $node->book['bid'] == 0 && $node->book['nid'] == 'new');
  

  // Add a drop-down to select the destination book.
  $form['book']['bid'] = array(
    '#type' => 'select',
    '#title' => t('Book'),
    '#default_value' => ($new_book) ? 'new' : $node->book['bid'],
    '#options' => $options,
    '#access' => (bool)$options,
    '#description' => t('Your page will be a part of the selected book.'),
    '#weight' => -5,
    '#attributes' => array('class' => 'book-title-select'),
    '#ahah' => array(
      'path' => 'book/js/form',
      'wrapper' => 'edit-book-plid-wrapper',
      'effect' => 'slide',
    ),
  );
}





/**
 * Implementation of hook_nodeapi().
 *
 * Appends book navigation to all nodes in the book, and handles book outline
 * insertions and updates via the node form.
 */
function og_book_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
/*
    case 'load':
      // Note - we cannot use book_link_load() because it will call node_load()
      $info['book'] = db_fetch_array(db_query('SELECT * FROM {book} b INNER JOIN {menu_links} ml ON b.mlid = ml.mlid WHERE b.nid = %d', $node->nid));
      if ($info['book']) {
        $info['book']['href'] = $info['book']['link_path'];
        $info['book']['title'] = $info['book']['link_title'];
        $info['book']['options'] = unserialize($info['book']['options']);
        return $info;
      }
      break;
*/
    case 'view':
    if (!$teaser) {
        if(og_is_group_type($node->type)){
          $node->content['book_navigation'] = array(
            '#value' => theme('og_book_navigation', NULL, $node->nid),
            '#weight' => 100,
          );
        }
        elseif (isset($node->author_group_nid) && !empty($node->book['bid']) && $node->build_mode == NODE_BUILD_NORMAL) {

          $node->content['book_navigation'] = array(
            '#value' => theme('og_book_navigation', $node->book, $node->author_group_nid),
            '#weight' => 100,
          );

          if ($page) {
            menu_set_active_trail(book_build_active_trail($node->book));
            menu_set_active_menu_name($node->book['menu_name']);
          }
        }
      }
      break;
/*
    case 'presave':
      // Always save a revision for non-administrators.
  //m.calabrese
//    check this later
      if (!empty($node->book['bid']) && !user_access('administer nodes')) {
        $node->revision = 1;
      }
      // Make sure a new node gets a new menu link.
      if (empty($node->nid)) {
        $node->book['mlid'] = NULL;
      }
      break;
    case 'insert':
    case 'update':
      if (!empty($node->book['bid'])) {
        if ($node->book['bid'] == 'new') {
          // New nodes that are their own book.
          $node->book['bid'] = $node->nid;
        }
        $node->book['nid'] = $node->nid;
        $node->book['menu_name'] = book_menu_name($node->book['bid']);
        _book_update_outline($node);
      }
      break;
    case 'delete':
      if (!empty($node->book['bid'])) {
        if ($node->nid == $node->book['bid']) {
          // Handle deletion of a top-level post.
          $result = db_query("SELECT b.nid FROM {menu_links} ml INNER JOIN {book} b on b.mlid = ml.mlid WHERE ml.plid = %d", $node->book['mlid']);
          while ($child = db_fetch_array($result)) {
            $child_node = node_load($child['nid']);
            $child_node->book['bid'] = $child_node->nid;
            _book_update_outline($child_node);
          }
        }
        menu_link_delete($node->book['mlid']);
        db_query('DELETE FROM {book} WHERE mlid = %d', $node->book['mlid']);
      }
      break;
    case 'prepare':
      // Prepare defaults for the add/edit form.
      if (empty($node->book) && (user_access('add content to books') || user_access('administer book outlines'))) {
        $node->book = array();
        if (empty($node->nid) && isset($_GET['parent']) && is_numeric($_GET['parent'])) {
          // Handle "Add child page" links:
          $parent = book_link_load($_GET['parent']);
          if ($parent && $parent['access']) {
            $node->book['bid'] = $parent['bid'];
            $node->book['plid'] = $parent['mlid'];
            $node->book['menu_name'] = $parent['menu_name'];
          }
        }
        // Set defaults.
        $node->book += _book_link_defaults(!empty($node->nid) ? $node->nid : 'new');
      }
      else {
        if (isset($node->book['bid']) && !isset($node->book['original_bid'])) {
          $node->book['original_bid'] = $node->book['bid'];
        }
      }
      // Find the depth limit for the parent select.
      if (isset($node->book['bid']) && !isset($node->book['parent_depth_limit'])) {
        $node->book['parent_depth_limit'] = _book_parent_depth_limit($node->book);
      }
      break;
*/
  }
}


/**
 * Implementation of hook_theme()
 */
function og_book_theme() {
  return array(
    'og_book_navigation' => array(
      'arguments' => array('book_link' => NULL, 'group_nid' => NULL),
      'path' => drupal_get_path('module', 'book'),
      'template' => 'book-navigation',
    ),
  );
}


/**
 * Process variables for book-navigation.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $book_link
 *
 * @see book-navigation.tpl.php
 */
function template_preprocess_og_book_navigation(&$variables) {
  $book_link = $variables['book_link'];
  
  if($book_link == NULL){
    $group = node_load($variables['group_nid']);
    $variables['book_id'] = $group->nid;
    $variables['book_title'] = check_plain($group->title);
    $variables['book_url'] = 'node/'. $group->nid;
    $variables['current_depth'] = 0;

    $tree = array();
    $children = og_book_get_books($group->nid);
    foreach($children as $bid => $child){
      $tree[] = array(
        'link' => $child,
        'below' => '',
      );
    }
            
    $variables['tree'] = $tree ? menu_tree_output($tree) : '';
  }
  else{
    // Provide extra variables for themers. Not needed by default.
    $variables['book_id'] = $book_link['bid'];
    $variables['book_title'] = check_plain($book_link['link_title']);
    $variables['book_url'] = 'node/'. $book_link['bid'];
    $variables['current_depth'] = $book_link['depth'];

    $variables['tree'] = '';
    if ($book_link['mlid']) {
      $variables['tree'] = book_children($book_link);

      if ($prev = book_prev($book_link)) {
        $prev_href = url($prev['href']);
        drupal_add_link(array('rel' => 'prev', 'href' => $prev_href));
        $variables['prev_url'] = $prev_href;
        $variables['prev_title'] = check_plain($prev['title']);
      }
      if ($book_link['plid'] && $parent = book_link_load($book_link['plid'])) {
        $parent_href = url($parent['href']);
        drupal_add_link(array('rel' => 'up', 'href' => $parent_href));
        $variables['parent_url'] = $parent_href;
        $variables['parent_title'] = check_plain($parent['title']);
      }
      elseif($book_link['plid'] == 0){
        $parent_href = url('node/'.$variables['group_nid']);
        drupal_add_link(array('rel' => 'up', 'href' => $parent_href));
        $variables['parent_url'] = $parent_href;
        $variables['parent_title'] = t('Home');
        
      }
      if ($next = book_next($book_link)) {
        $next_href = url($next['href']);
        drupal_add_link(array('rel' => 'next', 'href' => $next_href));
        $variables['next_url'] = $next_href;
        $variables['next_title'] = check_plain($next['title']);
      }
    }
  }
  
  $variables['has_links'] = FALSE;
  // Link variables to filter for values and set state of the flag variable.
  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');
  foreach ($links as $link) {
    if (isset($variables[$link])) {
      // Flag when there is a value.
      $variables['has_links'] = TRUE;
    }
    else {
      // Set empty to prevent notices.
      $variables[$link] = '';
    }
  }
}






/**
 * Builds and returns the book settings form.
 *
 * @see book_admin_settings_validate()
 *
 * @ingroup forms
 */
function og_book_admin_settings() {
  $query = "SELECT type, name FROM {node_type}";
  $result = db_query(db_rewrite_sql($query));
  $types = array();
  while($data = db_fetch_object($result)){
    if(og_group_access_is_group_access_type($data->type)){
      $types[$data->type] = $data->name;
    }
  }

  $form['og_book_allowed_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed group book outline types'),
    '#default_value' => variable_get('og_book_allowed_types', array('group_book')),
    '#options' => $types,
    '#description' => t('Select content types which users with the %add-perm permission will be allowed to add to the book hierarchy. Users with the %outline-perm permission can add all content types.', array('%add-perm' => t('add content to books'),  '%outline-perm' => t('administer book outlines'))),
    '#required' => TRUE,
  );
  $form['og_book_child_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default child page type'),
    '#default_value' => variable_get('og_book_child_type', 'group_book'),
    '#options' => $types,
    '#description' => t('The content type for the %add-child link must be one of those selected as an allowed book outline type.', array('%add-child' => t('Add child page'))),
    '#required' => TRUE,
  );
  $form['array_filter'] = array('#type' => 'value', '#value' => TRUE);
  $form['#validate'][] = 'og_book_admin_settings_validate';
  return system_settings_form($form);
}

/**
 * Validate the book settings form.
 *
 * @see book_admin_settings()
 */
function og_book_admin_settings_validate($form, &$form_state) {
  $child_type = $form_state['values']['og_book_child_type'];
  if (empty($form_state['values']['og_book_allowed_types'][$child_type])) {
    form_set_error('og_book_child_type', t('The content type for the %add-child link must be one of those selected as an allowed book outline type.', array('%add-child' => t('Add child page'))));
  }
}



