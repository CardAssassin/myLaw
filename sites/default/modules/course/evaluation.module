<?php

define ('EVALUATION_GRADE_INCOMPLETE', -1);
define ('EVALUATION_GRADE_FAIL', 0);
define ('EVALUATION_GRADE_PASS', 1);
define ('EVALUATION_GRADE_HONORS', 2);
define ('EVALUATION_GRADE_HIGH_HONORS', 3);



/**
 * Implementation of hook_node_info().
*/
function evaluation_node_info(){
  return array(
    'evaluation' => array(
      'name'   => t('Evaluation'),
      'module' => 'evaluation',
      'description' => "Evaluation",
      'has_title'   => FALSE,
      'has_teaser'  => FALSE,
      'has_body'    => TRUE,
  //    'body_label'  => 'Evaluation'
    )
  );
}


function evaluation_menu(){
  $items['node/%node/og/evaluation/%node/view_draft'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'evaluation_view_draft_pdf',
    'page arguments' => array(4, 1),
    'access callback' => 'evaluation_access_view',
    'access arguments' => array(1),
    'title' => 'View Evaluation Draft',
  );

  $items['node/%node/og/evaluation/%node/view_final'] = array(
    'type' => MENU_CALLBACK, 
    'page callback' => 'evaluation_view_final_pdf',
    'page arguments' => array(4, 1), 
    'access callback' => 'evaluation_access_view',
    'access arguments' => array(1),
    'title' => 'View Final Evaluation',
  );

  $items['node/%node/og/evaluation/%node/view_notes'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'evaluation_view_notes_pdf',
    'page arguments' => array(4, 1),
    'access callback' => 'evaluation_access_view',
    'access arguments' => array(1),
    'title' => 'View Evaluation Notes',
  );

  $items['node/%node/og/evaluation/%node/reset_grade'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evaluation_reset_grade', 4, 1),
    'access arguments' => array('can reset grade'),
    'title' => 'Reset Grade',
  );


  $items['evaluation_notes_pre/%'] = array(
    'title' => 'View Evaluation Notes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evaluation_get_student_notes_pre', 1),
    'access callback' => 'user_access',
    'access arguments' => array('view all evaluations'),
  );

  $items['evaluation_notes/%/%'] = array(
    'title' => 'View Evaluation Notes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evaluation_get_student_notes', 1, 2),
    'access callback' => 'user_access',
    'access arguments' => array('view all evaluations'),
  );

  
  $items['node/%node/og/evaluation/%node/finalize'] = array(
    'title'  => 'Finalize Evaluation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evaluation_finalize_form',4, 1),
    'access callback' => 'evaluation_can_submit_final',
    'access arguments' => array(1),
    'file' => 'evaluation.final.inc',
  );

  $items['node/%node/og/evaluation/add'] = array(
    'title'  => 'Create Evaluation',
    'page callback' => 'node_add',
    'page arguments' => array(3, 1),
    'access callback' => 'node_access',
    'access arguments' => array('create', 3),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );



  $items['node/%node/evaluations/initialize'] = array(
    'type' => MENU_CALLBACK, 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evaluation_complete_initialization_confirm', 1), 
    'access callback' => 'evaluation_can_complete_initialization', 
    'access arguments' => array(1),
    'title' => 'Complete Initialization',
    'file' => 'evaluation.list.inc',
  );
  $items['node/%node/evaluations/description'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evaluation_edit_description', 1),
    'access callback' => 'evaluation_access_view',
    'access arguments' => array(1),
    'title' => 'Evaluation Description',
    'file' => 'evaluation.list.inc',
  );
  $items['node/%node/evaluations/list'] = array(
    'type' => MENU_CALLBACK, 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evaluation_list_evaluations', 1), 
    'access callback' => 'evaluation_access_view', 
    'access arguments' => array(1),
    'title' => 'List Evaluations',
    'file' => 'evaluation.list.inc',
    'theme' => 'evaluation_list_evaluations'
  );
  $items['node/%node/evaluations/list/pdf'] = array(
    'type' => MENU_CALLBACK, 
    'page callback' => 'evaluation_list_evaluations_pdf',
    'page arguments' => array(1), 
    'access callback' => 'evaluation_access_view',
    'access arguments' => array(1),
    'title' => 'List Evaluations',
    'file' => 'evaluation.list.inc',
  );

  $items['transcript/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'evaluation_get_student_evals',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view all evaluations'),
    'title' => 'Transcript',
  );

  return $items;
}



function evaluation_can_submit_final($course){
  if($course->evaluations_initialized){
    return og_group_access_get_access('finalize evaluation', $course);
  }
  return FALSE;
}


function evaluation_access_view($group){
  return (user_access('view all evaluations') || og_group_access_get_access('view evaluation', $group));  
}


function evaluation_can_complete_initialization($course){
  return (!$course->evaluations_initialized && evaluation_are_evaluations_initialized($course) && og_group_access_get_access('finalize evaluation', $course));
}


function evaluation_are_evaluations_initialized($course){
  foreach(evaluation_get_evaluations($course->nid) as $eval_nid => $eval_data){
    $query = "SELECT count(*) FROM {node_revisions} WHERE nid = %d";
    $count = db_result(db_query($query, $eval_nid));
    if($count <= 1){
      return FALSE;
    }
  }
  return TRUE;
}



function evaluation_get_student_nuids($registered_course_crn){
  $student_nuids = array();
  db_set_active('banner');
  $query = "SELECT id FROM {courses} WHERE registered_course_crn = %d";
  $result = db_query($query, $registered_course_crn);
  while($data = db_fetch_object($result)){
    $student_nuids[] = $data->id;
  }
  db_set_active('default');
  return $student_nuids;
}


function evaluation_get_evaluations($course_nid){
  $evaluations = array();
  $query = "SELECT e.evaluation_nid, e.student_nuid, e.student, e.is_locked FROM {course_evaluations} e INNER JOIN {og_author} a ON e.evaluation_nid = a.nid WHERE a.author_group_nid = %d";
  $result = db_query($query, $course_nid);
  while($data = db_fetch_object($result)){
    $evaluations[$data->evaluation_nid] = array('student_nuid' => $data->student_nuid, 'student' => $data->student, 'is_locked' => $data->is_locked);
  }
  return $evaluations;
}



/**
 * Implementations of hook_group_access_perm();
*/
function evaluation_perm(){
  return array('create evaluation', 'unlock evaluations', 'always view student names', 'view all evaluations', 'view exam types', 'can reset grade', 'can drop student');
}

/**
 * Implementations of hook_group_access_perm();
*/
function evaluation_group_access_perm(){
  return array('update evaluation', 'view evaluation', 'finalize evaluation');
}


/**
 * Implementation of hook_access().
 */
function evaluation_access($op, $node) {
  switch($op){
  case 'view':
    return user_access('view all evaluations');
  case 'create':
    return user_access('create evaluation');
  }
}


/**
 * Implementation of hook_group_access().
*/
function evaluation_group_access($op, $node, $group) {
  switch($op){
  case 'view':
    return og_group_access_get_access('view evaluation', $group);
  case 'update':
    return og_group_access_get_access('update evaluation', $group);
  case 'delete':
    return false;  //only admin can delete evaluation
  }
}


/**
 * Implementations of hook_group_access_view_access_level();
*/
function evaluation_group_access_view_access_level($group) {
    return $group->perms['view evaluation'];
}


function evaluation_og_create_links($group){
  $links = array();
  if($group->type == 'course'){
    if(og_group_access_get_access('view evaluation', $group) || user_access('view all evaluations')){
      $links[] = l('Evaluations', 'node/'. $group->nid .'/evaluations/list');
    }
    $current_terms = course_get_current_banner_registration_terms();
    if(isset($group->registration_term) && !isset($current_terms[$group->registration_term]) && user_access('adjust course settings') && node_access('create', 'evaluation')){
      $links[] = l('Add Evaluation', 'node/'. $group->nid .'/og/evaluation/add');
    }
  }
  return $links;
}


/**
 * Implementation of hook_form().
 */
function evaluation_form(&$node, $form_state){
  $type = node_get_types('type', $node);

  if(!isset($node->nid)){
    if(isset($form_state['values']['manual_entry'])){
      $form['manual_entry'] = array(
        '#type'       => 'hidden',
        '#value'      => $form_state['values']['manual_entry'],
      );
    }
    else{
      $form['manual_entry'] = array(
        '#type'       => 'hidden',
        '#value'      => 1,
      );
     
    }
    if(isset($form_state['values']['student_nuid'])){
      $form['student_nuid'] = array(
        '#type'       => 'hidden',
        '#value'      => $form_state['values']['student_nuid']
      );
    }
    else{
      $form['student_nuid'] = array(
        '#type'       => 'select',
        '#title'      => t('Select Student'),
        '#options'    => course_student_list(),
      );
    }
    if(isset($form_state['values']['author_group_nid'])){
      $form['author_group_nid'] = array(
        '#type'      => 'hidden',
        '#value'     => $form_state['values']['author_group_nid'],
      );
      $course = node_load($form_state['values']['author_group_nid']);
    }
    else if(isset($node->author_group_nid)){
      $course = node_load($node->author_group_nid);
    }
    else {
      drupal_set_message('course not defined', 'error');
    }
    $form['registration_term'] = array(
      '#type'     => 'hidden',
      '#value'    => $course->registration_term,
    );
  }
  else{
    $form['#theme'] = 'theme_evaluation_node_form';

    $course = node_load($node->author_group_nid);

    if(evaluation_can_view_student_names($course)){
      $form['student'] = array(
        '#title' => t('Student Name'),
        '#type'  => 'item',
        '#value' => $node->student,
        '#weight' => -7
      );
    }

    $form['exam_number'] = array(
      '#title' => t('Exam Number'),
      '#type'  => 'item',
      '#value' => $node->exam_number,
      '#weight' => -6
    );

    if($course->evaluations_initialized){
      $list_grades = evaluation_list_grade_values($course->is_passfail, $node->grade_value);
    }
    else{
      $list_grades = evaluation_list_grade_values($course->is_passfail);
    }
    $form['grade_value'] = array(
      '#type'          => 'select',
      '#title'         => t('Select Grade'),
      '#options'       => $list_grades,
      '#default_value' => variable_get('grade_value', $node->grade_value),
      '#weight'        => -5
    );

    $form['body_field']['format'] = filter_form($node->format);
    $form['body_field']['#prefix'] = '<div class="body-field-wrapper">';
    $form['body_field']['#suffix'] = '</div>';
    $form['body_field']['#weight'] = -3;

    $form['body_field']['body'] = array(
      '#type'   => 'textarea',
      '#title'  => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#rows'          => 4,
      '#required'      => FALSE,
      '#weight'        => -3
    );

    $form['notes_field']['format'] = filter_form($node->format);
    $form['notes_field']['#prefix'] = '<div class="notes-field-wrapper">';
    $form['notes_field']['#suffix'] = '</div>';
    $form['notes_field']['notes'] = array(
      '#type'   => 'textarea',
      '#title'  => 'Private notes to student',
      '#default_value' => $node->notes,
      '#rows'          => 4,
      '#required'      => FALSE,
      '#weight'        => 0
    );
  }

  if(og_group_access_get_access('finalize evaluation', $course) && count($node->final_submissions) > 0){
    $form['#redirect'] = 'node/'.$node->author_group_nid.'/og/evaluation/'.$node->nid.'/finalize';
  }
  else{
    $form['#redirect'] = 'node/'.$node->author_group_nid.'/evaluations/list';
  }

  return $form;
}



/**
 * Implementation of hook_nodeapi
 */
function evaluation_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch($op){
    case 'delete':
      if($node->type == 'evaluation'){
        $query = "DELETE FROM {course_evaluations} WHERE evaluation_nid = %d";
        db_query($query, $node->nid);
        if($node->revision_count){
          $query = "DELETE FROM {course_evaluation_grades} g INNER JOIN {node_revisions} r ON g.vid = r.vid WHERE r.nid = %d";
          db_query($query, $node->nid);
        }
      }
      break;
  }
}


function evaluation_view_draft_pdf($evaluation, $course){
  $pdf = evaluation_get_draft_pdf($evaluation, $course);
  if(evaluation_can_view_student_names($course)){
    $student_lastname = str_replace(' ', '', substr($evaluation->student, 0, strpos($evaluation->student, ', ')));
    $filename = $evaluation->student_nuid . "_" . $student_lastname . "_" . $course->title;
  }
  else{
    $student_lastname = '';
    $filename = $evaluation->exam_number .  "_" . $course->title;
  }

  evaluation_show_pdf($pdf, $filename);
}

function evaluation_get_draft_pdf($evaluation, $course){
  $print = array(
    'course_title'   => $course->title,
    'course_identification' => $course->crn,
    'credits'       => $course->credits,
    'registration_term_desc' => $course->registration_term_desc,
    'primary_instructor'   => theme('username', (object)array('name' => $course->primary_instructor_nuid), 'nolink'),
    'secondary_instructor'   => $course->secondary_instructor_nuid == '' ? '' : theme('username', (object)array('name' => $course->secondary_instructor_nuid), 'nolink'),
    'can_view_student_names' => evaluation_can_view_student_names($course),
    'student'       => $evaluation->student,
    'exam_number'   => $evaluation->exam_number,
    'course_desc' => $course->body,
    'evaluation_desc'   => $course->evaluation_description,
    'evaluation'    => $evaluation->body,
    'grade'         => $evaluation->grade,
    'timestamp'     => $evaluation->revision_timestamp,
  );
  $evaluation_draft_template = drupal_get_path('module', 'course') .'/evaluation-draft.tpl.php';

  module_load_include('inc', 'print', 'print_pdf/print_pdf.pages');
  return print_pdf_custom_template($evaluation_draft_template, $print);
}


function evaluation_view_notes_pdf($evaluation, $course){
  $pdf = evaluation_get_notes_pdf($evaluation, $course);
  if(evaluation_can_view_student_names($course)){
    $student_lastname = str_replace(' ', '', substr($evaluation->student, 0, strpos($evaluation->student, ', ')));
    $filename = $evaluation->student_nuid . "_" . $student_lastname . "_" . $course->title;
  }
  else{
    $student_lastname = '';
    $filename = $evaluation->exam_number .  "_" . $course->title;
  }

  evaluation_show_pdf($pdf, $filename);
}

function evaluation_get_notes_pdf($evaluation, $course){
  $values = array(
    'course_title'   => $course->title,
    'course_identification' => $course->crn,
    'credits'       => $course->credits,
    'registration_term_desc'      => $course->registration_term_desc,
    'primary_instructor'   => theme('username', (object)array('name' => $course->primary_instructor_nuid), 'nolink'),
    'secondary_instructor'   => $course->secondary_instructor_nuid == '' ? '' : theme('username', (object)array('name' => $course->secondary_instructor_nuid), 'nolink'),
    'student'       => $evaluation->student,
    'exam_number'   => $evaluation->exam_number,
    'course_desc' => $course->body,
    'evaluation_desc'   => $course->evaluation_desc,
    'grade'         => $evaluation->grade,
    'notes'         => $evaluation->notes
  );

  $evaluation_notes_template = drupal_get_path('module', 'course') .'/evaluation-notes.tpl.php';

  module_load_include('inc', 'print', 'print_pdf/print_pdf.pages');
  return print_pdf_custom_template($evaluation_notes_template, $values);
}


function evaluation_view_final_pdf($evaluation, $course){
  $pdf = evaluation_get_final_pdf($evaluation, $course);
  db_set_active('final_evaluations');
  $query = "SELECT student_nuid, student, course_title FROM {final_evaluations} WHERE registered_course_crn = %d and student_nuid = '%s' ORDER BY timestamp DESC";
  $data =  db_fetch_object(db_query($query, $course->crn, $evaluation->student_nuid));
  db_set_active('default');

  $student_lastname = str_replace(' ', '', substr($data->student, 0, strpos($data->student, ', ')));
  $filename = $data->student_nuid . "_" . $student_lastname . "_" . $data->course_title;

  evaluation_show_pdf($pdf, $filename);
}

function evaluation_get_final_pdf($evaluation, $course){
  db_set_active('final_evaluations');
  $query = "SELECT pdf FROM {final_evaluations} WHERE registered_course_crn = %d AND student_nuid = '%s' ORDER BY timestamp DESC";
  $result = db_result(db_query($query, $course->crn, $evaluation->student_nuid));
  db_set_active('default');
  return db_decode_blob($result);

}


function evaluation_reset_grade(&$form_state, $evaluation, $course) {
  $form['evaluation_nid'] = array(
    '#type' => 'value',
    '#value' => $evaluation->nid,
  );

  return confirm_form($form,
    t('Are you sure you want to reset the grade for %student?', array('%student' => $evaluation->student)),
    'node/'. $course->nid . '/evaluations/list',
    t('Are you sure you want to reset the grade for %student?', array('%student' => $evaluation->student)),
    t('Reset Grade'),
    t('Cancel')
  );
}


function evaluation_reset_grade_submit($form, &$form_state) {
  $evaluation = node_load($form_state['values']['evaluation_nid']);
  $course = node_load($evaluation->author_group_nid);
  if ($form_state['values']['confirm']) {
    module_load_include('inc', 'node', 'node.pages'); 
    $evaluation->grade_value = EVALUATION_GRADE_INCOMPLETE;
    $form_state_execute = array();
    $form_state_execute['values'] = array(
      'op'          => t('Save')
    );

    drupal_execute('evaluation_node_form', $form_state_execute, $evaluation);
  }
  $form_state['redirect'] = 'node/'. $course->nid . '/evaluations/list';
}



/**
 * Implementation of hook_user
 */
function evaluation_user($op, $edit, &$account, $category = NULL) {
  switch($op){
    case 'delete':
      $query = "DELETE FROM {course_exam_numbers} WHERE student_nuid = '%s'";
      db_query($query, $account->name);
      break;
  }  
}


/**
 * Implementation of hook_theme()
 */
function evaluation_theme() {
  return array(
    'evaluation_node_form' => array(
      'arguments' => array(
        'form' => NULL, 
      ),
      'function' => 'theme_evaluation_node_form',
    ),
    'evaluation_list_evaluations' => array(
      'arguments' => array('form' => NULL),
      'file' => 'evaluation.list.inc'
    ),
  );
}


function theme_evaluation_node_form($form){
  $node = $form['#node'];
  $course = node_load($node->author_group_nid);
  $output = "<div id=exam-description>$course->evaluation_description</div>";

  $output.= drupal_render($form);
  
  return $output;
}



/**
 * Implementation of hook_insert().
*/
function evaluation_insert($node){
  $query = "INSERT INTO {course_evaluations} (evaluation_nid, student_nuid, student, is_locked, manual_entry) values (%d, '%s', '%s', 0, %d)";
  $student_object = (object)array('name' => $node->student_nuid);
  $student = theme('username', $student_object, 'nolink', 1);
  db_query($query, $node->nid, $node->student_nuid, $student, $node->manual_entry);

  if(!evaluation_student_has_exam_number($node->student_nuid, $node->registration_term)){
    evaluation_create_exam_number($node->student_nuid, $node->registration_term);
  }

}


/**
 * Implementation of hook_update().
*/
function evaluation_update($node){
  $query = "INSERT INTO {course_evaluation_grades} (vid, grade_value, notes) values (%d, %d, '%s')";
  db_query($query, $node->vid, $node->grade_value, $node->notes);
}


function evaluation_lock($evaluation_nid){
  $query = "UPDATE {course_evaluations} set is_locked = 1 WHERE evaluation_nid = %d";
  db_query($query, $evaluation_nid);
}

function evaluation_unlock($evaluation_nid){
  $query = "UPDATE {course_evaluations} set is_locked = 0 WHERE evaluation_nid = %d";
  db_query($query, $evaluation_nid);
}


/**
 * Implementation of hook_load()
 */
function evaluation_load($node){
  $query = "SELECT student_nuid, student, is_locked, manual_entry FROM {course_evaluations} WHERE evaluation_nid = %d";
  $evaluation = db_fetch_object(db_query($query, $node->nid));


/*
  //set exam info
  $evaluation->can_view_student_names = evaluation_can_view_student_names(node_load($evaluation->exam_nid));

  //$evaluation->revision_user_name = $revision_user_name['display'];


  if(!$evaluation->can_view_student_names){
    $evaluation->student_name = '';
  }
*/

  $query = "SELECT num.exam_number, num.exam_type, c.crn FROM {course_exam_numbers} num INNER JOIN {courses} c ON c.registration_term = num.registration_term INNER JOIN {og_author} auth ON auth.author_group_nid = c.nid WHERE num.student_nuid = '%s' AND auth.nid = %d";
  $course_exam_numbers = db_fetch_object(db_query($query, $evaluation->student_nuid, $node->nid));
  $evaluation->exam_number = $course_exam_numbers->exam_number;
  $evaluation->exam_type =  $course_exam_numbers->exam_type;

  $query = "SELECT grade_value, notes FROM {course_evaluation_grades} WHERE vid = %d";
  $course_evaluation_grades = db_fetch_object(db_query($query, $node->vid));
  $evaluation->notes = $course_evaluation_grades->notes;
  $evaluation->grade_value = $course_evaluation_grades->grade_value;
  if($evaluation->grade_value == NULL){
    $evaluation->grade_value = EVALUATION_GRADE_INCOMPLETE;
  }
  else{
    $evaluation->grade_value = $course_evaluation_grades->grade_value;
  }
  $evaluation->grade = evaluation_get_grade($evaluation->grade_value);

  $evaluation->revision_count = evaluation_get_num_revisions($node->nid);
  
  $evaluation->final_submissions = evaluation_get_final_submissions($course_exam_numbers->crn, $evaluation->student_nuid);

  return $evaluation;
}


/**
 * Implementation of hook_form_alter().
 */
function evaluation_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'evaluation_node_form') {
    $node = $form['#node'];

    unset($form['buttons']['preview']);
    unset($form['buttons']['delete']);

    if($node->revision_count == 0){
      //the first entry does not need a log entry
      //but the revision should be set 
      unset($form['revision_information']);
      $form['revision_information']['revision'] = array(
        '#type' => 'value',
        '#value' => 1,
      );
      $form['revision_information']['log'] = array(
        '#type' => 'value',
        '#value' => '[INITIAL REVISION]',
      );
    }
    else{
      //set revision to true
      //hide the option to the user
      $form['revision_information']['revision'] = array(
        '#type' => 'value',
        '#value' => 1,
      );
    }

  }
}


function evaluation_list_grade_values($is_passfail = TRUE, $current_grade_value = EVALUATION_GRADE_INCOMPLETE){
  $grade_values =  array();

  switch($current_grade_value){
  case EVALUATION_GRADE_INCOMPLETE:
    $grade_values[EVALUATION_GRADE_INCOMPLETE] = 'Incomplete';
  case EVALUATION_GRADE_FAIL:
    $grade_values[EVALUATION_GRADE_FAIL] = 'Fail';
  case EVALUATION_GRADE_PASS:
    $grade_values[EVALUATION_GRADE_PASS] = 'Pass';
  case EVALUATION_GRADE_HONORS:
    if(!$is_passfail){
      $grade_values[EVALUATION_GRADE_HONORS] = 'Honors';
    }
  case EVALUATION_GRADE_HIGH_HONORS:
    if(!$is_passfail){
      $grade_values[EVALUATION_GRADE_HIGH_HONORS] = 'High Honors';
    }
  }

  return $grade_values;
}


function evaluation_get_grade($grade_value){
  switch($grade_value){
  case EVALUATION_GRADE_INCOMPLETE:
    return "Incomplete";
  case EVALUATION_GRADE_FAIL:
    return "Fail";
  case EVALUATION_GRADE_PASS:
    return "Pass";
  case EVALUATION_GRADE_HONORS:
    return "Honors";
  case EVALUATION_GRADE_HIGH_HONORS:
    return "High Honors";
  }
}


function _evaluation_count_evaluations($course_nid){
  $query = "SELECT COUNT(e.evaluation_nid) as count FROM {course_evaluations} e INNER JOIN {og_author} a ON e.evaluation_nid = a.nid WHERE a.author_group_nid = %d";
  $data = db_fetch_object(db_query($query, $course_nid));
  return $data->count;
}


function evaluation_get_num_revisions($evaluation_nid){
  $query = "SELECT count(*) as revision_count FROM {node_revisions} WHERE nid = %d";
  $data = db_fetch_object(db_query($query, $evaluation_nid));
  //the first revision is created by the exam
  //we subtract 1 to reflect the revisions created by the user
  return $data->revision_count -1;
}


function evaluation_can_update($evaluation){
  if(!$evaluation->is_locked){
    $course = node_load($evaluation->author_group_nid);
    return (og_group_access_get_access('update evaluation', $course));
  }
  return FALSE;
}




function evaluation_get_final_submissions($registered_course_crn, $student_nuid){
  $final_submissions = array();
  db_set_active('final_evaluations');
  $query = "SELECT submitted_name, timestamp, comment FROM {final_evaluations} WHERE registered_course_crn = %d AND student_nuid = '%s' ORDER BY timestamp DESC";
  $result = db_query($query, $registered_course_crn, $student_nuid);

  db_set_active('default');
  while($data = db_fetch_array($result)){
    $final_submissions[] = $data;
  }
  
  return $final_submissions;
}


function evaluation_update_evaluations(){
  //add student evaluations
  db_set_active('banner');
  $query = "SELECT id, registered_course_crn, registration_term FROM {courses}";
  $result = db_query($query);
  db_set_active('default');
  while($student_course = db_fetch_object($result)){
    if(!evaluation_student_has_evaluation($student_course->id, $student_course->registered_course_crn)){
      
/*
      if(!evaluation_student_has_exam_number($student_course->id, $student_course->registration_term)){
        evaluation_create_exam_number($student_course->id, $student_course->registration_term);
      }
*/

      evaluation_create_evaluation($student_course->id, $student_course->registered_course_crn);
    }
  }

  //remove evaluations if the course is on banner but the student is no longer on banner
  db_set_active('banner');
  $query = "SELECT DISTINCT(registered_course_crn) FROM {courses}";
  $result = db_query($query);
  db_set_active('default');
  while($banner = db_fetch_object($result)){
    $query = "SELECT eval.evaluation_nid, eval.student_nuid FROM {course_evaluations} eval INNER JOIN {og_author} auth ON eval.evaluation_nid = auth.nid INNER JOIN {courses} c ON c.nid = auth.author_group_nid WHERE c.crn = %d";
    $result = db_query($query, $banner->registered_course_crn);
    while($eval = db_fetch_object($result)){
      db_set_active('banner');
      $query = "SELECT id FROM {courses} WHERE id = '%s' AND registered_course_crn = %d";
      $NUID = db_result(db_query($query, $eval->student_nuid, $banner->registered_course_crn));
      db_set_active('default');
      if(!$NUID){
        node_delete($eval->evaluation_nid);
      }
    }
  }
}


function evaluation_student_has_evaluation($student_nuid, $registered_course_crn){
  $query = "SELECT evaluation_nid FROM {course_evaluations} e INNER JOIN {og_author} auth ON e.evaluation_nid = auth.nid INNER JOIN {courses} c ON c.nid = auth.author_group_nid WHERE c.crn = %d AND e.student_nuid = '%s'";
  $evaluation_nid = db_result(db_query($query, $registered_course_crn, $student_nuid));
  drupal_set_message('evaluation_nid = ' . $evaluation_nid);
  if($evaluation_nid == ''){
    drupal_set_message('false');
  }
  return $evaluation_nid == '' ? FALSE : $evaluation_nid;
}


function evaluation_student_has_exam_number($student_nuid, $registration_term){
  $query = "SELECT exam_number FROM {course_exam_numbers} WHERE student_nuid = '%s' AND registration_term = %d";
  $exam_number = db_result(db_query($query, $student_nuid, $registration_term));
  return $exam_number == '' ? FALSE : $exam_number;
}


function evaluation_create_exam_number($student_nuid, $registration_term){
  $year_number = evaluation_get_year_number($student_nuid);

  $query_select = "SELECT student_nuid FROM {course_exam_numbers} WHERE exam_number = %d AND registration_term = %d";
  $exam_number_created = FALSE;
  while(!$exam_number_created){
    $random_number = rand(1000,9999);
    $exam_number = $year_number * 10000 + $random_number;
    $exam_number_exists = db_result(db_query($query_select, $exam_number, $registration_term));
    if(! $exam_number_exists) {
      $query_insert = "INSERT INTO {course_exam_numbers} (student_nuid, exam_number, registration_term) VALUES ('%s', '%s', %d)";
      db_query($query_insert, $student_nuid, $exam_number, $registration_term);
      $exam_number_created = TRUE;
    }
  } 
}


function evaluation_get_year_number($student_nuid){
  $class_years = evaluation_get_class_years();
  db_set_active('banner');
  $query = "SELECT CLASS_YEAR FROM {studentinfo} WHERE ID = '%s'";
  $class_year = db_result(db_query($query, $student_nuid));
  db_set_active('default');
  return array_search($class_year, $class_years);
}


function evaluation_get_class_years(){
  db_set_active('banner');
  $query = "SELECT DISTINCT(CLASS_YEAR) FROM {studentinfo} ORDER BY CLASS_YEAR ASC";
  $result = db_query($query);
  db_set_active('default');
  $class_years = array();
  $i = 3;
  while($data = db_fetch_object($result)){
    db_set_active('banner');
    $query = "SELECT COUNT(CLASS_YEAR) FROM {studentinfo} WHERE CLASS_YEAR = '%s'";
    $count = db_result(db_query($query, $data->CLASS_YEAR));
    db_set_active('default');

    if($count > 50){
      $class_years[$i] = $data->CLASS_YEAR;
      $i--;
    }
    else {
      $class_years[4] = $data->CLASS_YEAR;
    }
  }
  return $class_years;
}


function evaluation_create_evaluation($student_nuid, $registered_course_crn){
  $query = "SELECT nid FROM {courses} WHERE crn = %d";
  $course_nid = db_result(db_query($query, $registered_course_crn));

  if($course_nid == ''){
    return FALSE;
  }

  module_load_include('inc', 'node', 'node.pages'); 
  $evaluation_node = array('type' => 'evaluation'); 
  $evaluation_object = (object)$evaluation_node;
  
  $form_state = array();
  $form_state['values'] = array(
    'student_nuid' => $student_nuid, 
    'author_group_nid' => $course_nid,
    'op'          => t('Save')
  );

  drupal_execute('evaluation_node_form', $form_state, $evaluation_object);
}


/*
function evaluation_create_evaluations($node){
  module_load_include('inc', 'node', 'node.pages'); 
  $evaluation_node = array('type' => 'evaluation'); 
  $evaluation_object = (object)$evaluation_node;
  

  //create an evaluation node for every student selected
  foreach(course_get_students($node->nid) as $student_uid => $student_name){
    $query = "SELECT evaluation_nid FROM {course_evaluations} WHERE student_uid = %d";
    $data = db_fetch_object(db_query($query, $student_uid));
    if(!isset($data->evaluation_nid)){
      $form_state = array();
      $form_state['values'] = array(
        'uid'         => $node->uid,
        'name'        => $node->name,
        'student_uid' => $student_uid,
        'author_group_nid' => $node->nid,
        'op'          => t('Save')
      );
      drupal_execute('evaluation_node_form', $form_state, $evaluation_object);
    }
  }

  drupal_set_message('evaluations created');
  drupal_goto('node/'.$node->nid.'/evaluations/list');
}
*/





function evaluation_can_view_student_names($course){
  if(user_access('always view student names')){
    return TRUE;
  }
  if($course->evaluations_initialized){
    return TRUE;
  }
  if($course->is_performance_based){
    return TRUE;
  }
  return FALSE;
}


function evaluation_NUSL_user_profile_create_links($uid){
  $links = array();
  if(user_access('view all evaluations')){
    $account = user_load($uid);
    if(NUSL_user_profile_is_student($account)){
      $student_NUID = $account->name;
      $links[] = l('View Transcript', 'transcript/' . $student_NUID);
      $links[] = l('View Evaluation Notes', 'evaluation_notes_pre/'. $student_NUID);
    }
  }
  return $links;
}


function evaluation_get_student_evals($student_NUID){
  db_set_active('final_evaluations');
  $query = "SELECT DISTINCT(registered_course_crn) FROM {final_evaluations} WHERE student_nuid = '%s' ORDER BY registration_term DESC, course_title";
  $result = db_query($query, $student_NUID);

  $i = 0;
  while($data = db_fetch_object($result)){
    $i++;
    $query = "SELECT pdf FROM {final_evaluations} WHERE registered_course_crn = %d AND student_nuid = '%s' ORDER BY timestamp DESC";
    $pdf = db_decode_blob(db_result(db_query($query, $data->registered_course_crn, $student_NUID)));
    $filename = $student_NUID . '_' . $i . '.pdf';
    file_put_contents("/tmp/". $filename, $pdf);
  }
  db_set_active('default');

  $filename = $student_NUID;
  exec('pdftk /tmp/' . $student_NUID . '_*.pdf cat output /tmp/' . $filename . '.pdf');
  $cat_pdf = file_get_contents('/tmp/'.$student_NUID . '.pdf');
  evaluation_show_pdf($cat_pdf, $filename);
  exec('rm -f /tmp/' .$student_NUID . '*.pdf');
}

function evaluation_get_student_notes_pre($form_state, $student_NUID){
  $form['student_nuid'] = array(
    '#type' => 'hidden',
    '#value' => $student_NUID,
  );
  $form['registration_term'] = array(
    '#title' => t('Select Registration Term'),
    '#type'  => 'select',
    '#options' => course_get_past_registration_terms(),
  ); 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  $account = user_load(array('name' => $student_NUID));
  $form['#redirect'] = 'user/' . $account->uid;

  return $form;
}


function evaluation_get_student_notes($form_state, $student_NUID, $registration_term){
  $query = "SELECT e.evaluation_nid, c.nid FROM {course_evaluations} e INNER JOIN {og_author} auth ON e.evaluation_nid = auth.nid INNER JOIN {courses} c ON auth.author_group_nid = c.nid WHERE e.student_nuid = '%s' AND c.registration_term = %d";
  $result = db_query($query, $student_NUID, $registration_term);
  $i = 0;
  while($data = db_fetch_object($result)){
    $i++;
    $node = node_load($data->evaluation_nid);
    $course = node_load($data->nid);
    if($node->notes != '' && $node->notes != '<p></p>'){
      $pdf = evaluation_view_notes_pdf($node, $course);
      $filename = $student_NUID . '_notes_' . $i . '.pdf';
      file_put_contents("/tmp/". $filename, $pdf);
    }
  }
  $filename = $student_NUID . '_notes';
  exec('pdftk /tmp/' . $student_NUID . '_notes_*.pdf cat output /tmp/' . $filename . '.pdf');
  $cat_pdf = file_get_contents('/tmp/' . $filename . '.pdf');
  evaluation_show_pdf($cat_pdf, $filename);
  exec('rm -f /tmp/' . $student_NUID . '_notes*');
  
  $account = user_load(array('name' => $student_NUID));
  $form['#redirect'] = 'user/' . $account->uid;

  //drupal_goto('user/'. $account->uid);
}


function evaluation_get_student_notes_pre_submit($form, &$form_state){
  drupal_goto('evaluation_notes/' . $form_state['values']['student_nuid'] . '/' . $form_state['values']['registration_term']);
}


function evaluation_show_pdf($pdf, $filename){
  header("Content-Type: application/pdf");
  header("Content-Disposition: attachment; filename=$filename.pdf");
  //header("Content-Length: ".strlen($pdf));
  //header("Accept-Ranges: bytes");
  //header("Pragma: public");
  //header("Expires: 0");
  //header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
  header("Cache-Control: private");
  //header("Content-transfer-encoding: binary");

  echo($pdf);
  flush();
}

