<?php
// $Id$

/**
 * @file
 * Provides an "discussion topic" node type for posting information from a single form
 */


/**
 * Implementation of hook_node_info().
*/
function discussion_topic_node_info(){
  return array(
    'discussion_topic' => array(
      'name'   => t('discussion topic'),
      'module' => 'discussion_topic',
      'description' => "post a discussion topic",
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'has_teaser'  => TRUE,
      'teaser_label' => t('Teaser'),
      'has_body'    => TRUE,
      'body_label'  => t('Body')
    )
  );
}


/**
 * Implementation of hook_menu()
*/
function discussion_topic_menu(){
  $items['discussion_topics'] = array(
    'type' => MENU_CALLBACK, 
    'page callback' => 'discussion_topic_summary',
    'access callback' => user_access('view course'),
    'title' => 'Summary of Discussion Topics'
  );
  $items['discussion_topics_quick'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('discussion_topic_quick_form'),
    'title' => 'Quick discussion topic form',
    'access callback' => user_access('create discussion topic'),
  );
  $items['node/%node/og/discussion-topic/add'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'node_add',
    'page arguments' => array('discussion_topic'),
    'title' => 'Discussion Topic Form',
    'access callback' => 'discussion_topic_access_callback',
    'access arguments' => array(1),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'), 
  );
  $items['admin/settings/discussion-topic'] = array(
    'title'            => 'Discussion Topics',
    'description'      => 'Settings for discussion topics',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('discussion_topic_settings'),
    'type'             => MENU_NORMAL_ITEM,
    'access callback'  => 'user_access',
    'access arguments' => array('administer nodes')
  );
  
  return $items;
}


function discussion_topic_access_callback($group){
  return (og_group_access_get_access('create user to group posts', $group) && user_access('create discussion topic'));
}


/**
 * Implementation of hook_perm
*/
function discussion_topic_perm(){
  return array('create discussion topic', 'edit own discussion topic');
}


/**
 * Implementation of hook_access().
 */
function discussion_topic_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create discussion topic');
  }

  if($op == 'update' || $op == 'delete'){
    return (user_access('edit own discussion topic') && ($user->uid == $node->uid));
  }
}


/**
 * Settings page for this module.
 */
function discussion_topic_settings() {
  $form['discussion_topic_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Discussion Topic Settings'),
    '#collapsible' => true,
    '#collapsed' => false,
  );

  $types = node_get_types();
  foreach ($types as $type) {
    $options[$type->type] = t($type->name);
  }
  $form['discussion_topic_settings']['discussion_topic_expiration'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of days without activity before discussion topic is deleted'),
    '#default_value' => variable_get('discussion_topic_expiration', 30),
  );
  return system_settings_form($form);
}



/**
 * Implementation of hook_form().
 */
function discussion_topic_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -1
  );
 
  $form['body_field']['teaser'] = array(
  //$form['teaser'] = array(
    '#type'   => 'textarea',
    '#title'  => t('Teaser'),//check_plain($type->teaser_label),
    '#default_value' => $node->teaser,
    '#rows'          => 4,
    '#required'      => TRUE,
    '#weight' => -1,
  );
//  $form['teaser_field']['format'] = filter_form($node->format,-1);
//  $form['teaser_field']['#prefix'] = '<div class="teaser-field-wrapper">';
//  $form['teaser_field']['#suffix'] = '</div>';

  $form['body_field']['body'] = array(
  //$form['body'] = array(
    '#type'   => 'textarea',
    '#title'  => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows'          => 4,
    '#required'      => FALSE,
    '#weight' => 6,
  );
  $form['body_field']['format'] = filter_form($node->format,2);
  $form['body_field']['#prefix'] = '<div class="body-field-wrapper">';
  $form['body_field']['#suffix'] = '</div>';
  
  return $form;
}




function discussion_topic_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op) {
  case 'list':
    $blocks[0]['info'] = t('Community Discussion Topic');
    return $blocks; 
  case 'view':
    $blocks['subject'] = t('Community Discussion Topic');
    $blocks['content'] = drupal_get_form('discussion_topic_quick_form');
    break;
  }
  return $blocks;
}


function discussion_topic_quick_form(){
//  module_load_include('inc', 'node', 'node.pages');
  // Note title before rendering of form.
 // $title = drupal_get_title();
//  $form = node_add('discussion_topic');
 // print_r($form);die;

//  $types = node_get_types('names');
  // Restore title, which will have been overridden.
 // drupal_set_title($title);
  //  return array(
    //  'subject' => t('discussion topic form'),
    //  'content' => $form,
    //);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#weight' => -1,
    '#size'     => 20,
  );

  $form['teaser'] = array(
    '#type'   => 'textarea',
    '#title'  => t('Topic'),
    '#rows'          => 4,
    '#required'      => TRUE,
    
  );
/*  $form['body_field']['format'] = 1;
  $form['body_field']['#prefix'] = '<div class="body-field-wrapper">';
  $form['body_field']['#suffix'] = '</div>';
*/
   
   $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save'),
    '#submit' => array('discussion_topic_quick_form_submit'),
    '#weight' => 5,
  );

  return $form;


}





function discussion_topic_quick_form_submit($form, &$form_state){
  module_load_include('inc', 'node', 'node.pages');
/*  if (!function_exists('node_form')) {
    include_once drupal_get_path('module', 'node').'/node.pages.inc';
  }
*/
  global $user;
  
  $discussion_topic_object = new stdClass;
  $discussion_topic_object->type = 'discussion_topic';
  
  

  $new_form_state = array();
  $new_form_state['values'] = array(
    'uid'       => $user->uid,
    'name'      => $user->name,
    'og_groups' => array(variable_get('community_nid', 0)),
    'title'     => $form_state['values']['title'],
    'teaser'      => $form_state['values']['teaser'],
    'body'    => '',
    'op'          => t('Save'),
  );
  $new_form_state['redirect'] = 'frontpage';


  drupal_execute('discussion_topic_node_form', $new_form_state, $discussion_topic_object);

}



function discussion_topic_summary(){
  $header = array(   
    array('data' => t('Title'), 'field' => 'title', 'sort' => 'desc'),
    array('data' => t('Author'), 'field' => 'name'),
    array('data' => t('Date'), 'field' => 'created'),
    array('data' => t('Groups'), 'field' => ''),
    array('data' => t('Comments'), 'field' => 'comment_count'),
    array('data' => t('Last Comment'), 'field' => 'last_comment_timestamp')
  );

  $query = "SELECT * FROM {node} WHERE type = 'discussion_topic'";
  $result = db_query($query);

  $topics = array();
  while($topic = db_fetch_object($result)){
    $t = node_load($topic->nid);
    $rows[] = array(l($t->title, 'node/'.$t->nid), $t->name, $t->created, discussion_topic_display_groups($t->og_groups_both), $t->comment_count, $t->last_comment_timestamp);
  }
  
    // If we have rows for a table, theme the table
  //    otherwise set output to a message
  if ( count($rows) ) {
    $output = theme('table', $header, $rows);
  }
  else {
    $output = "No discussion topics were found";
  }
   
  // And finally, produce the page
  print theme('page', $output);

}

function discussion_topic_display_groups($og_groups_both){
  $output = '';
  if(isset($og_groups_both)){
    foreach($og_groups_both as $nid => $group_name){
      if($output != ''){
        $output .= ', ';
      }
      $output .= l($group_name, 'node/'.$nid);
    }
  }
  else{
    $output = 'All Community';
  }
  return $output;
}


/**
 * Implementations of hook_group_access_perm();

function discussion_topic_group_access_perm(){
  return array('create discussion topic', 'edit own discussion topic', 'edit any discussion topic', 'delete own discussion topic', 'delete any discussion topic');
}
*/

/**
 * Implementations of hook_group_access();

function discussion_topic_group_access($op, $node, $group) {
  switch($op){
  case 'create':
    return og_group_access_get_access('create discussion topic', $group);
    break;
  case 'update':
    if(isset($node->og_author)){
      return (og_group_access_get_access('edit any discussion topic') ||og_group_access_get_access('edit own discussion topic', $node->og_author));
    }
    else{
      return (og_group_access_get_access('edit any discussion topic'));
    }
    break;
  case 'delete':
    if(isset($node->og_author)){
      return (og_group_access_get_access('delete any discussion topic') ||og_group_access_get_access('delete own discussion topic', $node->og_author));
    }
    else{
      return (og_group_access_get_access('delete any discussion topic'));
    }
    break;
  }
  return TRUE;
}
*/


/**
 * Implementations of hook_group_access_menuitems()

function discussion_topic_group_access_menuitems(){
  $items['node/%node/og/discussion-topic/add'] = array(
    'title'  => 'Create Group Discussion Topic',
    'page callback' => 'node_add',
    'page arguments' => array(3, 1),
    'access callback' => 'node_access',
    'access arguments' => array('create', 3, NULL, 1),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );
  return $items;
}
*/




function discussion_topic_cron(){
  //delete all discussion topics with no activity within the determined number of days by the discussion_topic_expiration value.
  //module_load_include('module', 'node');

  $current_time = time();
  $expiration_time = gmmktime(0, 0, 0, gmdate('n', $current_time), gmdate('j', $current_time) - variable_get('discussion_topic_expiration', 30), gmdate('Y', $current_time));
  $query = "SELECT n.nid FROM {node} n INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid  WHERE n.type = 'discussion_topic' AND ncs.last_comment_timestamp < %d";
  $result = db_query($query, $expiration_time);
  while($data = db_fetch_object($result)){
    //copied from node.module
    //cannot call node_delete because of node_access
    $node = node_load($data->nid);

    db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);

    // Call the node-specific callback (if any):
    node_invoke($node, 'delete');
    node_invoke_nodeapi($node, 'delete');

    // Remove this node from the search index if needed.
    if (function_exists('search_wipe')) {
      search_wipe($node->nid, 'node');
    }
    watchdog('content', '@type: deleted %title.', array('@type' => $node->type, '%title' => $node->title));
  }
}


function discussion_topic_views_api() {
  return array(
    'api' => 2,
  );
}

