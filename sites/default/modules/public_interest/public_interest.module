<?php


/**
 * Implementation of hook_node_info().
*/
function public_interest_node_info(){
  return array(
    'public_interest' => array(
      'name'   => t('Public Interest'),
      'module' => 'public_interest',
      'description' => "Public Interest group",
      'has_title'   => TRUE,
      'title_label' => t('Public Interest group name'),
      'has_teaser'  => FALSE,
      'has_body'    => FALSE
    )
  );
}


/**
 * Implementation of hook_perm
*/
function public_interest_perm(){
  return array('create public interest group', 'view public interest group');
}


function public_interest_page() {
  $query = "Select nid FROM {node} WHERE type = 'public_interest'";
  $nid = db_result(db_query($query));
  drupal_goto('node/' . $nid);
}


/**
 * Implementation of hook_group_access_view_access_level() of og_group_access
 */
function public_interest_group_access_view_access_level($group){
  return $group->perms['view group'];
}


/**
 * Implementation of hook_access().
 */
function public_interest_access($op, $node) {
  if ($op == 'create') {
    return user_access('create public interest group');
  }
  if ($op == 'view') {
    return user_access('view public interest group');
  }
}


/**
 * Implementation of hook_form().
 */
function public_interest_form(&$node) {
  $type = node_get_types('type', $node);
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );

  $form['body_field']['body'] = array(
    '#type'   => 'textarea',
    '#title'  => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows'          => 4,
    '#required'      => FALSE,
    '#weight'        => -3
  );

  $form['body_field']['format'] = filter_form($node->format);
  $form['body_field']['#prefix'] = '<div class="body-field-wrapper">';
  $form['body_field']['#suffix'] = '</div>';

  

 // $form['og_website'] = array();

  $form['og_register'] = array('#type' => 'value', '#value' => 0);
  $form['og_directory'] = array('#type' => 'value', '#value' => 1);

  $form['og_selective'] = array(
    '#type' => 'value', 
    '#value' => $node->og_selective ? $node->og_selective : variable_get('og_content_type_selective_public_interest', OG_INVITE_ONLY), 
  );

  return $form;
}


function public_interest_is_public_interest_type($type){
  return(variable_get('public_interest_type_'.$type, 0));
}

function public_interest_get_group_nid(){
  $query = "SELECT nid FROM {node} WHERE type = '%s'";
  return db_result(db_query($query, 'public_interest'));
}


/**
 * Implementation of hook_form_alter()
*/
function public_interest_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $node = $form['#node'];
    if(public_interest_is_public_interest_type($node->type)){
      $form['public_interest'] = array(
        '#title' => 'Public Interest Matters',
        '#type' => 'fieldset', 
        '#collapsible' => TRUE,
        '#collapsed' => isset($node->public_interest) ? !$node->public_interest: 1,
      );
      
      $form['public_interest']['public_interest_post'] = array(
        '#type' => 'checkbox',
        '#title' => t('Public Interest Matters Post'),
        '#default_value' => isset($node->public_interest) ? $node->public_interest: 0,
        '#weight' => -20,
      );

    }


    if($node->type == 'public_interest'){
      unset($form['menu']);
      unset($form['comment_settings']);
      unset($form['revision_information']);
      unset($form['author']);
      $form['author']['name'] = array(
        '#type'  => 'value',
        '#value' => $node->name ? $node->name : '',
      );
      $form['author']['date'] = array(
        '#type'  => 'value',
        '#value' => $node->date ? $node->date : '',
      );
      unset($form['options']);
      $form['options']['status'] = array(
        '#type'  => 'value',
        '#value' => $node->status,
      );
      $form['options']['promote'] = array(
        '#type'  => 'value',
        '#value' => $node->promote,
      );
      $form['options']['sticky'] = array(
        '#type'  => 'value',
        '#value' => $node->sticky,
      );

      $form['og_private'] = array('#type' => 'value', '#value' => 0);
      
    }
  }
}


function public_interest_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['identity']['type']['#default_value'])) {
    $type = $form['identity']['type']['#default_value'];
  }
  else {
    $type = $form['identity']['type']['#value'];
  }

  if(!og_is_group_type($type)){
    $form['public_interest'] = array(
      '#type' => 'fieldset',
      '#title' => t('Public Interest'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('administer organic groups'),
    );
  
    $form['public_interest']['public_interest_type'] = array(
      '#type' => 'checkbox',
      '#title' => t('Apply Public Interest field'),
      '#default_value' => variable_get('public_interest_type_'.$type, 0),
    );
  }


  if (isset($form['#node_type']) && $form['#node_type']->type == 'public_interest') {  
    $form['og'] = array(
      '#type' => 'fieldset',
      '#title' => t('Organic groups'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('administer organic groups'),
    );
    $form['og']['og_content_type_usage'] = array(
      '#type' => 'value',
      '#value' => 'group'
    );


    $options = array(
      t('open - membership requests are accepted immediately.'), 
      t('moderated - membership requests must be approved.'), 
      t('invite only - membership must be created by an administrator.'), 
      t('closed - membership is exclusively managed by an administrator.'),
    );
    $form['og']['og_content_type_selective'] = array(
      '#type' => 'radios', 
      '#title' => t('Membership requests'), 
      '#required' => TRUE,
      '#default_value' => variable_get('og_content_type_selective_community', OG_INVITE_ONLY),
      '#options' => $options, 
      '#description' => t('How should membership requests be handled in this group? When you select <em>closed</em>, users will not be able to join <strong>or</strong> leave.')
    );
  } 
}


/**
 * hook_nodeapi implementation
 *
 * @ingroup event_nodeapi
 */
function public_interest_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch($op){
  case "insert":
    _public_interest_nodeapi_insert($node);
    break;
  case "update":
    _public_interest_nodeapi_delete($node);
    _public_interest_nodeapi_insert($node);
    break;
  case "delete":
    _public_interest_nodeapi_delete($node);
    break;
  case "load":
    $query = "SELECT nid FROM {public_interest} WHERE nid = %d";
    $data = db_fetch_object(db_query($query, $node->nid));
    if(isset($data->nid)){
      $node->public_interest = TRUE;
    }
    break;  
  }
}


function _public_interest_nodeapi_insert($node){
  if($node->public_interest_post){
    $query = "INSERT INTO {public_interest} (nid) VALUES (%d)";
    db_query($query, $node->nid);
  }
}


function _public_interest_nodeapi_delete($node){
  $query = "DELETE FROM {public_interest} WHERE nid = %d";
  db_query($query, $node->nid);
}


/**
 * Implementation of hook_insert().
*/
function public_interest_insert($node){
  variable_set('public_interest_nid', $node->nid);
  $item = array(
    'link_title' => $node->title,
    'link_path' => 'node/'. $node->nid,
    'menu_name' => 'primary-links',
    'module' => 'public_interest',
    'plid' => 0,
  );
  menu_link_save($item);
}



/**
 * Implement hook_node_access_records
*/
function public_interest_node_access_records($node) {
  $grants = array();
  if($node->public_interest){
    $grants[] = array(
      'realm' => 'all', 
      'gid' => 0, 
      'grant_view' => 1, 
      'grant_update' => 0, 
      'grant_delete' => 0
    );
  }
  return $grants;
}



/**
 * Implement hook_enable()
*/
function public_interest_enable(){
  //set community nodes as group type
  //putting this here, because it is not working in hook_install
  variable_set('og_content_type_usage_public_interest', 'group');
}


/**
 * Implementation of hook_views_api().
 */
function public_interest_views_api() {
  return array(
    'api' => 2,
  );
}

